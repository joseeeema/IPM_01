//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/UI/ControlesMando.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlesMando: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlesMando()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlesMando"",
    ""maps"": [
        {
            ""name"": ""ControlesGamepad"",
            ""id"": ""bdc61c0b-8507-442e-b7c0-36c739cf5275"",
            ""actions"": [
                {
                    ""name"": ""Inventario"",
                    ""type"": ""Button"",
                    ""id"": ""488e0835-94c8-497d-9613-2c0ea3e885cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controles"",
                    ""type"": ""Button"",
                    ""id"": ""5375b221-4ddd-4458-aede-380709bf14db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Opciones"",
                    ""type"": ""Button"",
                    ""id"": ""9757f4fd-368d-42c5-a250-34d2eb75b9f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9aa98ed9-4bb5-4776-850e-97b8f7a35dc3"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventario"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""583024be-2071-4660-95da-65c4ec0b3354"",
                    ""path"": ""<DualShockGamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controles"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d6c66e-4068-4cfc-9927-1591cab3fe77"",
                    ""path"": ""<DualShockGamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Opciones"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControlesGamepad
        m_ControlesGamepad = asset.FindActionMap("ControlesGamepad", throwIfNotFound: true);
        m_ControlesGamepad_Inventario = m_ControlesGamepad.FindAction("Inventario", throwIfNotFound: true);
        m_ControlesGamepad_Controles = m_ControlesGamepad.FindAction("Controles", throwIfNotFound: true);
        m_ControlesGamepad_Opciones = m_ControlesGamepad.FindAction("Opciones", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControlesGamepad
    private readonly InputActionMap m_ControlesGamepad;
    private List<IControlesGamepadActions> m_ControlesGamepadActionsCallbackInterfaces = new List<IControlesGamepadActions>();
    private readonly InputAction m_ControlesGamepad_Inventario;
    private readonly InputAction m_ControlesGamepad_Controles;
    private readonly InputAction m_ControlesGamepad_Opciones;
    public struct ControlesGamepadActions
    {
        private @ControlesMando m_Wrapper;
        public ControlesGamepadActions(@ControlesMando wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventario => m_Wrapper.m_ControlesGamepad_Inventario;
        public InputAction @Controles => m_Wrapper.m_ControlesGamepad_Controles;
        public InputAction @Opciones => m_Wrapper.m_ControlesGamepad_Opciones;
        public InputActionMap Get() { return m_Wrapper.m_ControlesGamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlesGamepadActions set) { return set.Get(); }
        public void AddCallbacks(IControlesGamepadActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlesGamepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlesGamepadActionsCallbackInterfaces.Add(instance);
            @Inventario.started += instance.OnInventario;
            @Inventario.performed += instance.OnInventario;
            @Inventario.canceled += instance.OnInventario;
            @Controles.started += instance.OnControles;
            @Controles.performed += instance.OnControles;
            @Controles.canceled += instance.OnControles;
            @Opciones.started += instance.OnOpciones;
            @Opciones.performed += instance.OnOpciones;
            @Opciones.canceled += instance.OnOpciones;
        }

        private void UnregisterCallbacks(IControlesGamepadActions instance)
        {
            @Inventario.started -= instance.OnInventario;
            @Inventario.performed -= instance.OnInventario;
            @Inventario.canceled -= instance.OnInventario;
            @Controles.started -= instance.OnControles;
            @Controles.performed -= instance.OnControles;
            @Controles.canceled -= instance.OnControles;
            @Opciones.started -= instance.OnOpciones;
            @Opciones.performed -= instance.OnOpciones;
            @Opciones.canceled -= instance.OnOpciones;
        }

        public void RemoveCallbacks(IControlesGamepadActions instance)
        {
            if (m_Wrapper.m_ControlesGamepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlesGamepadActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlesGamepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlesGamepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlesGamepadActions @ControlesGamepad => new ControlesGamepadActions(this);
    public interface IControlesGamepadActions
    {
        void OnInventario(InputAction.CallbackContext context);
        void OnControles(InputAction.CallbackContext context);
        void OnOpciones(InputAction.CallbackContext context);
    }
}
